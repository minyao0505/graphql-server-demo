scalar Date

### User ###

# Demo 1 - user
type User {
  # TODO - Exercise 1 - Add a contact field for the user
  random: String
}

extend type User {
  productSold: [Product!]
  productPurchased: [Product!]
}

### Product ###
enum ProductStatus {
  ACTIVE
  RESERVED
}

# TODO - Exercise 2 - create a product type
# TODO - Exercise 4 - add seller and buyer field
type Product {
  random: String!
}

# TODO - Exercise 3 - create a mutation for creating new product
input CreateProductInput {
  random: String!
}

### Transaction ###
# Demo 2 - Transaction
# Demo 3 - seller
type Transaction {
  random: ID!
}

# Demo 2 - createTransactionInput

### Query ###
type Query {
  user(id: ID!): User!
  # Demo 1: users
  # TODO: Exercise 1: create a users query that return a list of users
  # TODO: Exercise 2: create a getProducts query that return a list of products
  # TODO: Extra exercise - create a getProduct query that take id as argument and return the product
  getTransactions: [Transaction!]
}

### Mutation ###
type Mutation {
  # TODO - Exercise 3 - create a createProduct mutation that return the created product
  # Demo 2 - createTransaction
  createTransaction: Transaction!
}
